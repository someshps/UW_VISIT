{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPb+IB9uzNd8HvEF7dtoDH9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import GPyOpt #importing library\n","import numpy as np #importing numpy"],"metadata":{"id":"OhAEjx-5Tab4","executionInfo":{"status":"ok","timestamp":1687987074180,"user_tz":420,"elapsed":120,"user":{"displayName":"Somesh Pratap Singh","userId":"09456644702443521551"}}},"execution_count":139,"outputs":[]},{"cell_type":"markdown","source":["Code for black-box optimization. Our goal is to maximise the output given the set of input data. The code takes in input data and use it to suggest the next point where we should evaluate our function. After we run the experiments at the parameters suggested by the model, we can append that to our existing data and then rerun the model to ask for the next point where we should be evaluating. We would have to repeat these steps until our convergence criteria."],"metadata":{"id":"TONVSGa7tTol"}},{"cell_type":"code","source":["#defining the domain\n","# --> since number of passes can take only integer values, we define it as a discrete variable that can take 25 discerete\n","# values i.e., the integers in the range 1 to 25\n","\n","# --> similar to number of passes, the resolution we have available for speed (in mm/s) is 0.5,\n","# so we define this also as a discrete variable that can take 31 distinct values in the range 0.5 to 15.5\n","# varying at an interval of 0.5\n","\n","# --> SOD is also a discrete variable that takes two values: 6.5 and 13\n","# (or we have the freedom, should I also increase the number of values for it)\n","\n","domain =[{'name': '#Passes', 'type': 'discrete', 'domain': (1, 2, 3, 4, 5, 6, 7, 8, 9,\n","                                                         10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n","                                                         21, 22, 23, 24, 25)},\n","        {'name': 'Speed', 'type': 'discrete', 'domain': (0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5,\n","                                                        5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10,\n","                                                        10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 15, 15.5)},\n","        {'name': 'SOD', 'type': 'discrete', 'domain': (6.5, 13)}]"],"metadata":{"id":"TxGPFkzMkvmk","executionInfo":{"status":"ok","timestamp":1687987074359,"user_tz":420,"elapsed":3,"user":{"displayName":"Somesh Pratap Singh","userId":"09456644702443521551"}}},"execution_count":140,"outputs":[]},{"cell_type":"code","source":["# giving the initial data, 3 dimensional input and 1-D output\n","# Note: I haven't inlcuded the pristine sample in the input since\n","# it is a bit confusing to define the value of input parameters for it\n","X_init = np.array([[2, 5, 13],\n","                  [20, 15, 6.5],\n","                  [2, 5, 6.5],\n","                  [2, 15, 13],\n","                  [10, 5, 13],\n","                  [10, 15, 6.5],\n","                  [10, 5, 6.5],\n","                  [10, 15, 13],\n","                  [20, 5, 13],\n","                  [2, 15, 6.5],\n","                  [20, 5, 6.5],\n","                  [20, 15, 13]])\n","Y_init = np.array([[91.853],\n","                  [90.393],\n","                  [93.208],\n","                  [91.742],\n","                  [95.125],\n","                  [95.185],\n","                  [94.079],\n","                  [93.418],\n","                  [92.761],\n","                  [90.722],\n","                  [94.974],\n","                  [92.296]])"],"metadata":{"id":"dEGfwCr3wDZj","executionInfo":{"status":"ok","timestamp":1687987074359,"user_tz":420,"elapsed":2,"user":{"displayName":"Somesh Pratap Singh","userId":"09456644702443521551"}}},"execution_count":141,"outputs":[]},{"cell_type":"code","source":["i = 0 #to keep the count of number of iterations\n","\n","# make a copy of the array containing the initial dataset, just to be safe and\n","# distinguish the initial data from the one we would be appending\n","X_updating = X_init\n","Y_updating = Y_init"],"metadata":{"id":"vFryWl-KwN75","executionInfo":{"status":"ok","timestamp":1687987074360,"user_tz":420,"elapsed":3,"user":{"displayName":"Somesh Pratap Singh","userId":"09456644702443521551"}}},"execution_count":142,"outputs":[]},{"cell_type":"code","source":["while i<1:\n","    #the following line creates the BO object to run the optimisation\n","    #Few points to note:\n","    # 1. f is set to 'None' since we are evaluating our objective externally\n","    # 2. model type is ‘GP’, standard Gaussian process.\n","    # 3. acqusition function used is 'EI', Expected Improvement (this did not ask me to tune psi, would have to look into this)\n","    # 4. I have set exact_eval to 'False', assuming our output would be noisy and not an exact value\n","    # 5. maximize is set to 'True', since we want to maximise the output\n","    bo_step = GPyOpt.methods.BayesianOptimization(f = None, domain = domain, model_type='GP',\n","                                                  X = X_updating, Y = Y_updating, initial_design_numdata=12,\n","                                                  acquisition_type='EI', exact_feval=False, maximize=True)\n","\n","    x_next_eval = bo_step.suggest_next_locations() #Gpy-opt method to suggest next point based\n","    print(x_next_eval)\n","    # y_next = we will update this after getting results from our experiment\n","\n","    # --> the following two lines add the new data entry to our existing dataset\n","    # X_updating = np.vstack((X_updating, x_next_eval))\n","    # Y_updating = np.vstack((Y_updating, y_next))\n","\n","    i += 1"],"metadata":{"id":"yjhko4hIwQ6r","executionInfo":{"status":"ok","timestamp":1687987076110,"user_tz":420,"elapsed":1753,"user":{"displayName":"Somesh Pratap Singh","userId":"09456644702443521551"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"31bf1d96-309f-4029-e341-1bc57d0945eb"},"execution_count":143,"outputs":[{"output_type":"stream","name":"stdout","text":["[[21.  15.5  6.5]]\n"]}]}]}